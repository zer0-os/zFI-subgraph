type Deposit @entity {
  id: ID!
  by: Account!
  amount: BigInt!
  pool: Pool!
  txHash: Bytes!
  timestamp: BigInt!
}

type UnstakedDeposit @entity {
  id: ID!
  by: Account!
  amount: BigInt!
  pool: Pool!
  txHash: Bytes!
  timestamp: BigInt!
}

type Reward @entity {
  id: ID!
  for: Account!
  amount: BigInt!
  pool: Pool!
  txHash: Bytes!
  timestamp: BigInt!
}

type Account @entity {
  id: ID!
  stakes: [Deposit!]! @derivedFrom(field: "by")
  unstakes: [UnstakedDeposit!]! @derivedFrom(field: "by")
}

type Pool @entity {
  id: ID!
  deposits: [Deposit!]! @derivedFrom(field: "pool")
}

type TokenStakeLockUpdated @entity {
  id: ID!
  by: Account!
  depositId: BigInt!
  lockedFrom: BigInt!
  lockedUntil: BigInt!
  pool: Pool!
  txHash: Bytes!
  timestamp: BigInt!
}

type TokenPoolWeightUpdated @entity {
  id: ID!
  by: Account!
  fromVal: BigInt!
  toVal: BigInt!
  pool: Pool!
  txHash: Bytes!
  timestamp: BigInt!
}
