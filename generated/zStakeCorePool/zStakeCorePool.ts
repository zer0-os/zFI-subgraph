// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PoolWeightUpdated extends ethereum.Event {
  get params(): PoolWeightUpdated__Params {
    return new PoolWeightUpdated__Params(this);
  }
}

export class PoolWeightUpdated__Params {
  _event: PoolWeightUpdated;

  constructor(event: PoolWeightUpdated) {
    this._event = event;
  }

  get _by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _fromVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _toVal(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakeLockUpdated extends ethereum.Event {
  get params(): StakeLockUpdated__Params {
    return new StakeLockUpdated__Params(this);
  }
}

export class StakeLockUpdated__Params {
  _event: StakeLockUpdated;

  constructor(event: StakeLockUpdated) {
    this._event = event;
  }

  get _by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get depositId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lockedFrom(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lockedUntil(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get _by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Synchronized extends ethereum.Event {
  get params(): Synchronized__Params {
    return new Synchronized__Params(this);
  }
}

export class Synchronized__Params {
  _event: Synchronized;

  constructor(event: Synchronized) {
    this._event = event;
  }

  get _by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get yieldRewardsPerWeight(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lastYieldDistribution(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unstaked extends ethereum.Event {
  get params(): Unstaked__Params {
    return new Unstaked__Params(this);
  }
}

export class Unstaked__Params {
  _event: Unstaked;

  constructor(event: Unstaked) {
    this._event = event;
  }

  get _by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class YieldClaimed extends ethereum.Event {
  get params(): YieldClaimed__Params {
    return new YieldClaimed__Params(this);
  }
}

export class YieldClaimed__Params {
  _event: YieldClaimed;

  constructor(event: YieldClaimed) {
    this._event = event;
  }

  get _by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class zStakeCorePool__getDepositResultValue0Struct extends ethereum.Tuple {
  get tokenAmount(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): BigInt {
    return this[1].toBigInt();
  }

  get lockedFrom(): BigInt {
    return this[2].toBigInt();
  }

  get lockedUntil(): BigInt {
    return this[3].toBigInt();
  }

  get isYield(): boolean {
    return this[4].toBoolean();
  }
}

export class zStakeCorePool__usersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class zStakeCorePool extends ethereum.SmartContract {
  static bind(address: Address): zStakeCorePool {
    return new zStakeCorePool("zStakeCorePool", address);
  }

  balanceOf(_user: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_user)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blockNumber(): BigInt {
    let result = super.call("blockNumber", "blockNumber():(uint256)", []);

    return result[0].toBigInt();
  }

  try_blockNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("blockNumber", "blockNumber():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDeposit(
    _user: Address,
    _depositId: BigInt
  ): zStakeCorePool__getDepositResultValue0Struct {
    let result = super.call(
      "getDeposit",
      "getDeposit(address,uint256):((uint256,uint256,uint64,uint64,bool))",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_depositId)
      ]
    );

    return changetype<zStakeCorePool__getDepositResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getDeposit(
    _user: Address,
    _depositId: BigInt
  ): ethereum.CallResult<zStakeCorePool__getDepositResultValue0Struct> {
    let result = super.tryCall(
      "getDeposit",
      "getDeposit(address,uint256):((uint256,uint256,uint64,uint64,bool))",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_depositId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<zStakeCorePool__getDepositResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getDepositsLength(_user: Address): BigInt {
    let result = super.call(
      "getDepositsLength",
      "getDepositsLength(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getDepositsLength(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDepositsLength",
      "getDepositsLength(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isFlashPool(): boolean {
    let result = super.call("isFlashPool", "isFlashPool():(bool)", []);

    return result[0].toBoolean();
  }

  try_isFlashPool(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFlashPool", "isFlashPool():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastYieldDistribution(): BigInt {
    let result = super.call(
      "lastYieldDistribution",
      "lastYieldDistribution():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastYieldDistribution(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastYieldDistribution",
      "lastYieldDistribution():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  now256(): BigInt {
    let result = super.call("now256", "now256():(uint256)", []);

    return result[0].toBigInt();
  }

  try_now256(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("now256", "now256():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pendingYieldRewards(_staker: Address): BigInt {
    let result = super.call(
      "pendingYieldRewards",
      "pendingYieldRewards(address):(uint256)",
      [ethereum.Value.fromAddress(_staker)]
    );

    return result[0].toBigInt();
  }

  try_pendingYieldRewards(_staker: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingYieldRewards",
      "pendingYieldRewards(address):(uint256)",
      [ethereum.Value.fromAddress(_staker)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolToken(): Address {
    let result = super.call("poolToken", "poolToken():(address)", []);

    return result[0].toAddress();
  }

  try_poolToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolToken", "poolToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolTokenReserve(): BigInt {
    let result = super.call(
      "poolTokenReserve",
      "poolTokenReserve():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_poolTokenReserve(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "poolTokenReserve",
      "poolTokenReserve():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardLockPeriod(): BigInt {
    let result = super.call(
      "rewardLockPeriod",
      "rewardLockPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardLockPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardLockPeriod",
      "rewardLockPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardToWeight(reward: BigInt, rewardPerWeight: BigInt): BigInt {
    let result = super.call(
      "rewardToWeight",
      "rewardToWeight(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(reward),
        ethereum.Value.fromUnsignedBigInt(rewardPerWeight)
      ]
    );

    return result[0].toBigInt();
  }

  try_rewardToWeight(
    reward: BigInt,
    rewardPerWeight: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardToWeight",
      "rewardToWeight(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(reward),
        ethereum.Value.fromUnsignedBigInt(rewardPerWeight)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  users(param0: Address): zStakeCorePool__usersResult {
    let result = super.call(
      "users",
      "users(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new zStakeCorePool__usersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_users(param0: Address): ethereum.CallResult<zStakeCorePool__usersResult> {
    let result = super.tryCall(
      "users",
      "users(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new zStakeCorePool__usersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  usersLockingWeight(): BigInt {
    let result = super.call(
      "usersLockingWeight",
      "usersLockingWeight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_usersLockingWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "usersLockingWeight",
      "usersLockingWeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  weight(): BigInt {
    let result = super.call("weight", "weight():(uint32)", []);

    return result[0].toBigInt();
  }

  try_weight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("weight", "weight():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  weightToReward(_weight: BigInt, rewardPerWeight: BigInt): BigInt {
    let result = super.call(
      "weightToReward",
      "weightToReward(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_weight),
        ethereum.Value.fromUnsignedBigInt(rewardPerWeight)
      ]
    );

    return result[0].toBigInt();
  }

  try_weightToReward(
    _weight: BigInt,
    rewardPerWeight: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "weightToReward",
      "weightToReward(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_weight),
        ethereum.Value.fromUnsignedBigInt(rewardPerWeight)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  yieldRewardsPerWeight(): BigInt {
    let result = super.call(
      "yieldRewardsPerWeight",
      "yieldRewardsPerWeight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_yieldRewardsPerWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "yieldRewardsPerWeight",
      "yieldRewardsPerWeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class __zStakePoolBase__initCall extends ethereum.Call {
  get inputs(): __zStakePoolBase__initCall__Inputs {
    return new __zStakePoolBase__initCall__Inputs(this);
  }

  get outputs(): __zStakePoolBase__initCall__Outputs {
    return new __zStakePoolBase__initCall__Outputs(this);
  }
}

export class __zStakePoolBase__initCall__Inputs {
  _call: __zStakePoolBase__initCall;

  constructor(call: __zStakePoolBase__initCall) {
    this._call = call;
  }

  get _rewardToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _factory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _poolToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _initBlock(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _weight(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class __zStakePoolBase__initCall__Outputs {
  _call: __zStakePoolBase__initCall;

  constructor(call: __zStakePoolBase__initCall) {
    this._call = call;
  }
}

export class ChangeRewardLockPeriodCall extends ethereum.Call {
  get inputs(): ChangeRewardLockPeriodCall__Inputs {
    return new ChangeRewardLockPeriodCall__Inputs(this);
  }

  get outputs(): ChangeRewardLockPeriodCall__Outputs {
    return new ChangeRewardLockPeriodCall__Outputs(this);
  }
}

export class ChangeRewardLockPeriodCall__Inputs {
  _call: ChangeRewardLockPeriodCall;

  constructor(call: ChangeRewardLockPeriodCall) {
    this._call = call;
  }

  get _rewardLockPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeRewardLockPeriodCall__Outputs {
  _call: ChangeRewardLockPeriodCall;

  constructor(call: ChangeRewardLockPeriodCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _rewardToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _factory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _poolToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _initBlock(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _weight(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeImplementationCall extends ethereum.Call {
  get inputs(): InitializeImplementationCall__Inputs {
    return new InitializeImplementationCall__Inputs(this);
  }

  get outputs(): InitializeImplementationCall__Outputs {
    return new InitializeImplementationCall__Outputs(this);
  }
}

export class InitializeImplementationCall__Inputs {
  _call: InitializeImplementationCall;

  constructor(call: InitializeImplementationCall) {
    this._call = call;
  }
}

export class InitializeImplementationCall__Outputs {
  _call: InitializeImplementationCall;

  constructor(call: InitializeImplementationCall) {
    this._call = call;
  }
}

export class ProcessRewardsCall extends ethereum.Call {
  get inputs(): ProcessRewardsCall__Inputs {
    return new ProcessRewardsCall__Inputs(this);
  }

  get outputs(): ProcessRewardsCall__Outputs {
    return new ProcessRewardsCall__Outputs(this);
  }
}

export class ProcessRewardsCall__Inputs {
  _call: ProcessRewardsCall;

  constructor(call: ProcessRewardsCall) {
    this._call = call;
  }
}

export class ProcessRewardsCall__Outputs {
  _call: ProcessRewardsCall;

  constructor(call: ProcessRewardsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetWeightCall extends ethereum.Call {
  get inputs(): SetWeightCall__Inputs {
    return new SetWeightCall__Inputs(this);
  }

  get outputs(): SetWeightCall__Outputs {
    return new SetWeightCall__Outputs(this);
  }
}

export class SetWeightCall__Inputs {
  _call: SetWeightCall;

  constructor(call: SetWeightCall) {
    this._call = call;
  }

  get _weight(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWeightCall__Outputs {
  _call: SetWeightCall;

  constructor(call: SetWeightCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lockUntil(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class StakeAsPoolCall extends ethereum.Call {
  get inputs(): StakeAsPoolCall__Inputs {
    return new StakeAsPoolCall__Inputs(this);
  }

  get outputs(): StakeAsPoolCall__Outputs {
    return new StakeAsPoolCall__Outputs(this);
  }
}

export class StakeAsPoolCall__Inputs {
  _call: StakeAsPoolCall;

  constructor(call: StakeAsPoolCall) {
    this._call = call;
  }

  get _staker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeAsPoolCall__Outputs {
  _call: StakeAsPoolCall;

  constructor(call: StakeAsPoolCall) {
    this._call = call;
  }
}

export class SyncCall extends ethereum.Call {
  get inputs(): SyncCall__Inputs {
    return new SyncCall__Inputs(this);
  }

  get outputs(): SyncCall__Outputs {
    return new SyncCall__Outputs(this);
  }
}

export class SyncCall__Inputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class SyncCall__Outputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get _depositId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class UpdateStakeLockCall extends ethereum.Call {
  get inputs(): UpdateStakeLockCall__Inputs {
    return new UpdateStakeLockCall__Inputs(this);
  }

  get outputs(): UpdateStakeLockCall__Outputs {
    return new UpdateStakeLockCall__Outputs(this);
  }
}

export class UpdateStakeLockCall__Inputs {
  _call: UpdateStakeLockCall;

  constructor(call: UpdateStakeLockCall) {
    this._call = call;
  }

  get depositId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lockedUntil(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateStakeLockCall__Outputs {
  _call: UpdateStakeLockCall;

  constructor(call: UpdateStakeLockCall) {
    this._call = call;
  }
}
